from flask import Flask, request, abort
from linebot.v3.messaging import (
    MessagingApi, Configuration, ApiClient,FlexMessage,
    TextMessage, MessageAction, CarouselColumn, CarouselTemplate, TemplateMessage, ReplyMessageRequest
)
from linebot.v3.webhook import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.webhooks import MessageEvent, TextMessageContent
from linebot.models import QuickReplyButton, PostbackAction
from linebot.v3.exceptions import InvalidSignatureError
import os
import re
import math
import random
import logging
from datetime import datetime, timedelta


logging.basicConfig(
    level=logging.INFO,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô DEBUG ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ log ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    format='[%(asctime)s] %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # ‡∏û‡∏¥‡∏°‡∏û‡πå log ‡πÑ‡∏õ‡∏¢‡∏±‡∏á stdout (‡πÄ‡∏ä‡πà‡∏ô Render, Cloud Run ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô)
    ]
)

app = Flask(__name__)

channel_secret = os.getenv("LINE_CHANNEL_SECRET")
access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    raise ValueError("Missing LINE_CHANNEL_ACCESS_TOKEN or LINE_CHANNEL_SECRET")

configuration = Configuration(access_token=access_token)
api_client = ApiClient(configuration)
messaging_api = MessagingApi(api_client)
handler = WebhookHandler(channel_secret)

user_drug_selection = {}
user_sessions = {}
user_ages = {}


@app.route('/')
def home():
    return 'LINE Bot is running!'

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature")
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"


def calculate_warfarin(inr, twd, bleeding, supplement=None):
    if bleeding == "yes":
        return "üö® ‡∏°‡∏µ major bleeding ‚Üí ‡∏´‡∏¢‡∏∏‡∏î Warfarin, ‡πÉ‡∏´‡πâ Vitamin K1 10 mg IV"

    warning = ""
    if supplement:
        herb_map = {
            "‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°": "garlic", "‡πÉ‡∏ö‡πÅ‡∏õ‡∏∞‡∏Å‡πä‡∏ß‡∏¢": "ginkgo", "‡πÇ‡∏™‡∏°": "ginseng",
            "‡∏Ç‡∏°‡∏¥‡πâ‡∏ô": "turmeric", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤": "fish oil",
            "dong quai": "dong quai", "cranberry": "cranberry"
        }
        high_risk = list(herb_map.keys())
        matched = [name for name in high_risk if name in supplement]
        if matched:
            herbs = ", ".join(matched)
            warning = f"\n‚ö†Ô∏è ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠ INR ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà: {herbs}\n‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á INR ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î"
        else:
            warning = "\n‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£ ‚Üí ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á INR"

    followup_text = get_followup_text(inr)

    if inr < 1.5:
        result = f"üîπ INR < 1.5 ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 10‚Äì20%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 1.1:.1f} ‚Äì {twd * 1.2:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 1.5 <= inr <= 1.9:
        result = f"üîπ INR 1.5‚Äì1.9 ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 5‚Äì10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 1.05:.1f} ‚Äì {twd * 1.10:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 2.0 <= inr <= 3.0:
        result = "‚úÖ INR 2.0‚Äì3.0 ‚Üí ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÄ‡∏î‡∏¥‡∏°"
    elif 3.1 <= inr <= 3.9:
        result = f"üîπ INR 3.1‚Äì3.9 ‚Üí ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 5‚Äì10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 0.9:.1f} ‚Äì {twd * 0.95:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 4.0 <= inr <= 4.9:
        result = f"‚ö†Ô∏è INR 4.0‚Äì4.9 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ 1 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ 10%\n‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà: {twd * 0.9:.1f} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    elif 5.0 <= inr <= 8.9:
        result = "‚ö†Ô∏è INR 5.0‚Äì8.9 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ 1‚Äì2 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡πâ Vitamin K1 1 mg"
    else:
        result = "üö® INR ‚â• 9.0 ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡πâ Vitamin K1 5‚Äì10 mg"

    return f"{result}{warning}\n\n{followup_text}"

def get_inr_followup(inr):
    if inr < 1.5: return 7
    elif inr <= 1.9: return 14
    elif inr <= 3.0: return 56
    elif inr <= 3.9: return 14
    elif inr <= 6.0: return 7
    elif inr <= 8.9: return 5
    elif inr > 9.0: return 2
    return None

def get_followup_text(inr):
    days = get_inr_followup(inr)
    if days:
        date = (datetime.now() + timedelta(days=days)).strftime("%-d %B %Y")
        return f"üìÖ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à INR ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {days} ‡∏ß‡∏±‡∏ô\nüìå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à: {date}"
    else:
        return ""

# --------------------------
# ‡∏™‡πà‡∏á carousel ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£
# --------------------------
def send_supplement_carousel(event):
    columns = [
        CarouselColumn(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°",
            text="‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?",
            actions=[
                MessageAction(label="‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ", text="‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ"),
                MessageAction(label="‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", text="‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°"),
                MessageAction(label="‡πÉ‡∏ö‡πÅ‡∏õ‡∏∞‡∏Å‡πä‡∏ß‡∏¢", text="‡πÉ‡∏ö‡πÅ‡∏õ‡∏∞‡∏Å‡πä‡∏ß‡∏¢")
            ]
        ),
        CarouselColumn(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°",
            text="‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?",
            actions=[
                MessageAction(label="‡πÇ‡∏™‡∏°", text="‡πÇ‡∏™‡∏°"),
                MessageAction(label="‡∏Ç‡∏°‡∏¥‡πâ‡∏ô", text="‡∏Ç‡∏°‡∏¥‡πâ‡∏ô"),
                MessageAction(label="‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤", text="‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏õ‡∏•‡∏≤")
            ]
        ),
        CarouselColumn(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°",
            text="‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?",
            actions=[
                MessageAction(label="‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ", text="‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ"),
                MessageAction(label="‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î", text="‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î")
            ]
        )
        
    ]
    messaging_api.reply_message(
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=[
                TemplateMessage(
                    alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°",
                    template=CarouselTemplate(columns=columns)
                )
            ]
        )
    )

    # --------------------------
    # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô Warfarin flow
    # --------------------------
    if user_id in user_sessions:
                session = user_sessions[user_id]  # ‚úÖ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ indent 4 ‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ tab
    if session.get("flow") == "warfarin":
        step = session.get("step")
        if step == "ask_inr":
            try:
                session["inr"] = float(text)
                session["step"] = "ask_twd"
                reply = "üìà ‡πÉ‡∏™‡πà Total Weekly Dose (TWD) ‡πÄ‡∏ä‡πà‡∏ô 28"
            except:
                reply = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ INR ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 2.5"
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=reply)])
            )
            return

        elif step == "ask_twd":
            try:
                session["twd"] = float(text)
                session["step"] = "ask_bleeding"
                reply = "ü©∏ ‡∏°‡∏µ major bleeding ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (yes/no)"
            except:
                reply = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ TWD ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 28"
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=reply)])
            )
            return

        elif step == "ask_bleeding":
            if text.lower() not in ["yes", "no"]:
                reply = "‚ùå ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ yes ‡∏´‡∏£‡∏∑‡∏≠ no ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=reply)])
                )
                return
            session["bleeding"] = text.lower()
            session["step"] = "choose_supplement"
            send_supplement_carousel(event)
            return
        
        elif step == "choose_supplement":
            if text == "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ":
                result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"], "")
                user_sessions.pop(user_id, None)
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=result)])
                )
            elif text in ["‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î", "‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]:
                session["step"] = "ask_supplement"
                reply = "üåø ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°, ‡πÇ‡∏™‡∏°, ‡∏Ç‡∏°‡∏¥‡πâ‡∏ô"
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=reply)])
                )
            else:
                result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"], text)
                user_sessions.pop(user_id, None)
                messaging_api.reply_message(
                    ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=result)])
                )
            return

        elif step == "ask_supplement":
            supplement = text.strip()
            result = calculate_warfarin(session["inr"], session["twd"], session["bleeding"], supplement)
            user_sessions.pop(user_id, None)
            messaging_api.reply_message(
                ReplyMessageRequest(reply_token=event.reply_token, messages=[TextMessage(text=result)])
            )
            return
        

    if user_id not in user_sessions and user_id not in user_drug_selection:
        messaging_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[
                    TextMessage(text="‚ùì ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤ warfarin' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤‡πÄ‡∏î‡πá‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                ]
            )
        )
        return
        
@app.route("/")
def home():
    return "‚úÖ LINE Bot is ready to receive Webhook"

# ‚úÖ ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PORT ‡πÅ‡∏•‡∏∞ HOST ‡∏ó‡∏µ‡πà Render ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
